{"version":3,"sources":["redux/weatherSlice.js","components/WeatherDisplay.js","components/SearchBox.js","redux/darkModeSlice.js","components/DarkModeToggle.js","redux/store.js","App.js","index.js"],"names":["fetchWeather","createAsyncThunk","async","response","fetch","city","ok","Error","json","weatherSlice","createSlice","name","initialState","data","loading","error","reducers","extraReducers","builder","addCase","pending","state","fulfilled","action","payload","rejected","message","WeatherDisplay","_ref","weather","main","React","createElement","className","temp","description","SearchBox","onSearch","setCity","useState","type","placeholder","value","onChange","e","target","onClick","handleSearch","trim","darkModeSlice","toggleDarkMode","actions","DarkModeToggle","dispatch","useDispatch","darkMode","useSelector","htmlFor","id","checked","handleToggle","store","configureStore","reducer","weatherReducer","darkModeReducer","App","Suspense","fallback","style","color","AppWrapper","Provider","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.9191482c.chunk.js","sourcesContent":["// src/redux/weatherSlice.js\r\n\r\nimport { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\r\n\r\n// Async thunk to fetch weather data\r\nexport const fetchWeather = createAsyncThunk('weather/fetchWeather', async (city) => {\r\n  const response = await fetch(`https://api.openweathermap.org/data/2.5/weather?q=${city}&units=metric&APPID=20e16eabf0fe350667beaf56a5ecdc3b`);\r\n  if (!response.ok) {\r\n    throw new Error('Failed to fetch weather data');\r\n  }\r\n  const data = await response.json();\r\n  return data;\r\n});\r\n\r\nconst weatherSlice = createSlice({\r\n  name: 'weather',\r\n  initialState: {\r\n    data: {},\r\n    loading: false,\r\n    error: null,\r\n  },\r\n  reducers: {},\r\n  extraReducers: (builder) => {\r\n    builder\r\n      .addCase(fetchWeather.pending, (state) => {\r\n        state.loading = true;\r\n        state.error = null; // Reset error\r\n      })\r\n      .addCase(fetchWeather.fulfilled, (state, action) => {\r\n        state.loading = false;\r\n        state.data = action.payload;\r\n      })\r\n      .addCase(fetchWeather.rejected, (state, action) => {\r\n        state.loading = false;\r\n        state.error = action.error.message;\r\n      });\r\n  },\r\n});\r\n\r\nexport default weatherSlice.reducer;\r\n","import React from 'react';\r\n\r\nconst WeatherDisplay = ({ weather }) => {\r\n  // Check if weather data exists before rendering\r\n  if (!weather || !weather.main) return null;\r\n\r\n  return (\r\n    <div className=\"weather-info\">\r\n      <p>{weather.name}</p>\r\n      <p>{weather.main.temp} Â°C</p>\r\n      <p>{weather.weather[0].main}</p>\r\n      <p>({weather.weather[0].description})</p>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default WeatherDisplay;\r\n","// SearchBox.js\r\nimport React, { useState } from 'react';\r\n\r\nconst SearchBox = ({ onSearch }) => {\r\n  const [city, setCity] = useState('');\r\n\r\n  const handleSearch = () => {\r\n    if (city.trim() !== '') {\r\n      onSearch(city);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"search-container\">\r\n      <input\r\n        type=\"text\"\r\n        placeholder=\"Enter city/town...\"\r\n        value={city}\r\n        onChange={(e) => setCity(e.target.value)}\r\n      />\r\n      <button onClick={handleSearch}>Search</button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SearchBox;\r\n","import { createSlice } from '@reduxjs/toolkit';\r\n\r\nconst darkModeSlice = createSlice({\r\n  name: 'darkMode',\r\n  initialState: false,\r\n  reducers: {\r\n    toggleDarkMode: (state) => !state,\r\n  },\r\n});\r\n\r\nexport const { toggleDarkMode } = darkModeSlice.actions;\r\nexport default darkModeSlice.reducer;\r\n","// DarkModeToggle.js\r\nimport React from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { toggleDarkMode } from '../redux/darkModeSlice';\r\n\r\nconst DarkModeToggle = () => {\r\n  const dispatch = useDispatch();\r\n  const darkMode = useSelector((state) => state.darkMode);\r\n\r\n  const handleToggle = () => {\r\n    dispatch(toggleDarkMode());\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <label htmlFor=\"dark-mode-toggle\">\r\n        {darkMode ? 'Switch to Light Mode' : 'Switch to Dark Mode'}\r\n      </label>\r\n      <input\r\n        id=\"dark-mode-toggle\"\r\n        type=\"checkbox\"\r\n        checked={darkMode}\r\n        onChange={handleToggle}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default DarkModeToggle;\r\n","import { configureStore } from '@reduxjs/toolkit';\r\nimport weatherReducer from './weatherSlice';\r\nimport darkModeReducer from './darkModeSlice';\r\n\r\nconst store = configureStore({\r\n  reducer: {\r\n    weather: weatherReducer,\r\n    darkMode: darkModeReducer,\r\n  },\r\n});\r\n\r\nexport default store;\r\n","// src/App.js\n\nimport React, { Suspense } from 'react';\nimport { Provider, useDispatch, useSelector } from 'react-redux';\nimport { fetchWeather } from './redux/weatherSlice';\nimport WeatherDisplay from './components/WeatherDisplay';\nimport SearchBox from './components/SearchBox';\nimport DarkModeToggle from './components/DarkModeToggle';\nimport store from './redux/store'; // Ensure this is correctly imported\n\nfunction App() {\n  const dispatch = useDispatch();\n  const weather = useSelector((state) => state.weather.data);\n  const loading = useSelector((state) => state.weather.loading);\n  const error = useSelector((state) => state.weather.error);\n  const darkMode = useSelector((state) => state.darkMode);\n\n  return (\n    <div className={`App ${darkMode ? 'dark' : 'light'}`}>\n      <header className=\"App-header\">\n        <h1>Weather App</h1>\n        <SearchBox onSearch={(city) => dispatch(fetchWeather(city))} />\n        <DarkModeToggle />\n        <Suspense fallback={<p>Loading...</p>}>\n          {loading && <p>Loading...</p>}\n          {error && <p style={{ color: 'red' }}>{error}</p>}\n          {weather.main && <WeatherDisplay weather={weather} />}\n        </Suspense>\n      </header>\n    </div>\n  );\n}\n\n// Wrap the app with Provider for the Redux store\nconst AppWrapper = () => (\n  <Provider store={store}>\n    <App />\n  </Provider>\n);\n\nexport default AppWrapper;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { Provider } from 'react-redux';\nimport store from './redux/store'; // Ensure this is correctly imported\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}